import java.util.*;
/**
链表部分翻转：m、n要求 1 <= m <= n <= 链表节点个数
使用虚拟头节点dummyHead；
确定三个特殊节点：
 - Head：始终指向翻转起始处的前一个节点；
 - pre：指向当前翻转节点的前一个节点；
 - cur：指向当前翻转节点;
 1.确定这三个节点初始位置，Head指向第m-1个节点，pre指向第m个节点，cur指向第m+1个节点；
 2.翻转cur节点（循环：从m+1至n）
     - 保存cur.next至临时变量temp；
     - 使得cur.next指向Head.next
     - Head.next指向cur
     - 更新pre和cur（pre.next = temp, cur = temp;）
 3.返回dummyHead.next
*/
class ListNode {
  int val;
  ListNode next;
     ListNode(int x) { val = x; }
 }
class Solution {
    public static ListNode reverse(ListNode l1, int m, int n) {
     if(m <= 0 || n<= 0 || m > n){
         throw new IllegalArgumentException("Index Illegal");
     }//判断m、n是否是合法index
     
     ListNode dummyHead = new ListNode(0);
     dummyHead.next = l1;//声明虚拟头节点
     
     ListNode pre = dummyHead;
     
     ListNode cur = l1;
     
     ListNode Head = dummyHead;//翻转起始处的前一个节点
     int i = 0;
     for(i = 0; i < m-1 ; i++){
        Head = Head.next;
     }
     pre = Head.next;//确定前向节点
     cur = pre.next;//确定当前翻转节点
     
     for(i = m-1  ; i < n-1; i++){
         //m == n 时，则不进入循环
         ListNode temp = cur.next;//保存翻转节点的下一个节点
         
         cur.next = Head.next;//翻转节点指向翻转起始处的节点
         Head.next = cur;//使得翻转起始处节点前一个节点指向当前翻转节点
         pre.next = temp;//重新设置前一个节点与之后链表的关系
         cur = temp;//更新当前节点
     }
     
     return dummyHead.next;
    
  } 
}

public class MyClass {
    public static void main(String args[]) {
        ListNode l1 = new ListNode(1);
        ListNode l2 = new ListNode(2);
        ListNode l3 = new ListNode(3);
        ListNode l4 = new ListNode(4);
        ListNode l5 = new ListNode(5);
        //l1.next = new ListNode(5);
        l1.next = l2;
        l2.next = l3;
        l3.next = l4;
        l4.next = l5;
        
          ListNode l = Solution.reverse(l1,5,5);
    while(l!=null){
        System.out.println(l.val);
        l = l.next;
     }
        
    }
}
